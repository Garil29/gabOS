#!/bin/bash

set -e

# ===============================
# Instalador desatendido para gabOS
# Basado en Arch Linux
# ===============================

function log() {
  echo -e "\033[1;32m[INFO]\033[0m $1"
}

function error_exit() {
  echo -e "\033[1;31m[ERROR]\033[0m $1"
  exit 1
}

# Asume ejecución como root, obtiene usuario real
USER_REAL=${SUDO_USER:-$(logname 2>/dev/null || echo '')}
HOME_REAL=$(eval echo ~$USER_REAL)

function ensure_pkg() {
  for pkg in "$@"; do
    if ! pacman -Q "$pkg" &>/dev/null; then
      log "Instalando $pkg..."
      pacman -S --noconfirm "$pkg" || error_exit "No se pudo instalar $pkg."
    else
      log "$pkg ya está instalado."
    fi
  done
}

log "Actualizando sistema..."
pacman -Syu --noconfirm || error_exit "Error al actualizar el sistema."

log "Instalando herramientas base y dependencias esenciales..."
ensure_pkg curl unzip htop base-devel cargo git

log "Instalando Helix y configurando como editor por defecto..."
ensure_pkg helix

# Añadir variables de entorno si no existen (sin 'export')
for var in "EDITOR=hx" "VISUAL=hx"; do
  grep -qxF "$var" /etc/environment || echo "$var" >> /etc/environment
done

log "Agregando usuario '$USER_REAL' al grupo wheel..."
usermod -aG wheel "$USER_REAL" || error_exit "No se pudo agregar al grupo wheel."

log "Instalando Sway y componentes Wayland..."
ensure_pkg sway wofi kitty xorg-xwayland xdg-utils xdg-desktop-portal-wlr

# ======= NUEVA SECCIÓN: Configuración básica sway =======
log "Creando configuración básica de Sway para $USER_REAL..."
SWAY_CONFIG_DIR="$HOME_REAL/.config/sway"
SWAY_CONFIG_FILE="$SWAY_CONFIG_DIR/config"

runuser -u "$USER_REAL" -- bash -c "
mkdir -p '$SWAY_CONFIG_DIR'
cat > '$SWAY_CONFIG_FILE' << 'EOF'
# Tecla principal (Super/Windows)
set \$mod Mod4

# Lanzar terminal
bindsym \$mod+Space exec kitty

# Cerrar ventana
bindsym \$mod+q kill

# Reiniciar Sway
bindsym \$mod+Shift+c reload

# Salir de sway
bindsym \$mod+Shift+e exit

# Usar wofi
bindsym \$mod+x exec wofi --drun
# Barra de estado simple
bar {
  status_command while :; do date '+%a %d %b %Y %H:%M:%S'; sleep 1; done
}
EOF
"
# ======= FIN NUEVA SECCIÓN =======

log "Instalando sonido (Pipewire)..."
ensure_pkg pipewire wireplumber alsa-utils

log "Instalando ly (session manager)..."
ensure_pkg ly

log "Habilitando ly como display manager..."
systemctl enable ly.service || error_exit "No se pudo habilitar ly."

# === INSTALAR YAY si no existe ===
if ! command -v yay &>/dev/null; then
  log "Instalando yay (helper de AUR)..."
  runuser -u "$USER_REAL" -- bash -c "
    cd ~
    rm -rf yay
    git clone https://aur.archlinux.org/yay.git || exit 1
    cd yay
    makepkg -si --noconfirm || exit 1
    cd ..
    rm -rf yay
  " || error_exit "Falló la instalación de yay."
fi

# === INSTALAR BRAVE (desde AUR) ===
log "Instalando Brave Browser (desde AUR)..."
runuser -u "$USER_REAL" -- yay -S --noconfirm brave-bin || error_exit "No se pudo instalar Brave."

log "Instalación básica completada."
echo -e "\nReinicia el sistema para iniciar sesión."
echo -e "\n gabOS está listo. ¡Buen hacking, $USER_REAL!"
read -p "Presiona Enter para reiniciar..."

sleep 2
reboot