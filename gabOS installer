#!/bin/bash

set -e

# ===============================
# Instalador desatendido para gabOS
# Basado en Arch Linux
# ===============================

function log() {
  echo -e "\033[1;32m[INFO]\033[0m $1"
}

function error_exit() {
  echo -e "\033[1;31m[ERROR]\033[0m $1"
  exit 1
}

if [[ $EUID -ne 0 ]]; then
  error_exit "Este script debe ejecutarse como root."
fi

USER_REAL=${SUDO_USER:-$(whoami)}
HOME_REAL=$(eval echo ~$USER_REAL)

function ensure_pkg() {
  for pkg in "$@"; do
    if ! pacman -Q "$pkg" &>/dev/null; then
      log "Instalando $pkg..."
      pacman -S --noconfirm "$pkg"
    else
      log "$pkg ya está instalado."
    fi
  done
}

log "Actualizando sistema..."
pacman -Syu --noconfirm

log "Instalando herramientas base..."
ensure_pkg sudo git curl wget neovim unzip htop base-devel

log "Instalando Helix y configurando como editor por defecto..."
ensure_pkg helix

# Añadir variables de entorno si no existen
for var in "EDITOR=hx" "VISUAL=hx"; do
  grep -qxF "export $var" /etc/environment || echo "export $var" >> /etc/environment
done

log "Agregando usuario '$USER_REAL' al grupo wheel..."
usermod -aG wheel "$USER_REAL"

log "Instalando Sway y componentes Wayland..."
ensure_pkg sway wofi kitty xorg-xwayland xdg-utils xdg-desktop-portal-wlr

log "Instalando sonido (Pipewire)..."
ensure_pkg pipewire wireplumber alsa-utils

log "Instalando TBSM (session manager)..."
ensure_pkg tbsm

# Añadir autoinicio de tbsm en bash_profile y zshrc si no existe
AUTOLOGIN_LINE="[[ -z \$DISPLAY && \$(tty) = /dev/tty1 ]] && exec tbsm"
for shellrc in "$HOME_REAL/.bash_profile" "$HOME_REAL/.zshrc"; do
  if [[ -f "$shellrc" ]]; then
    grep -qxF "$AUTOLOGIN_LINE" "$shellrc" || echo "$AUTOLOGIN_LINE" >> "$shellrc"
  else
    echo "$AUTOLOGIN_LINE" > "$shellrc"
  fi
  chown "$USER_REAL":"$USER_REAL" "$shellrc"



# === INSTALAR YAY si no existe ===
if ! command -v yay &>/dev/null; then
  log "Instalando yay (helper de AUR)..."
  sudo -u "$USER_REAL" bash -c "
    cd ~
    rm -rf yay
    git clone https://aur.archlinux.org/yay.git
    cd yay
    makepkg -si --noconfirm
    cd ..
    rm -rf yay
  "
fi

# === INSTALAR BRAVE (desde AUR) ===
log "Instalando Brave Browser (desde AUR)..."
sudo -u "$USER_REAL" yay -S --noconfirm brave-bin

# === INSTALAR GVM (OpenVAS desde AUR) ===
log "Instalando GVM (OpenVAS desde AUR)..."
sudo -u "$USER_REAL" yay -S --noconfirm gvm

log "Inicializando base de datos de GVM... (puede tardar)"
sudo -u "$USER_REAL" gvm-setup || error_exit "Falló la inicialización de GVM."

log "Habilitando servicios de GVM..."
for svc in gvmd ospd-openvas notus-scanner; do
  if systemctl list-unit-files | grep -q "^${svc}.service"; then
    systemctl enable --now "$svc"
  else
    log "Servicio $svc no encontrado, omitiendo."
  fi

done

# === INSTALAR EWW (ElKowar's Wacky Widgets) ===
log "Instalando EWW desde código fuente..."
sudo -u "$USER_REAL" bash -c "
  cd ~
  rm -rf eww
  git clone https://github.com/elkowar/eww.git
  cd eww
  cargo build --release
  mkdir -p ~/.local/bin
  cp target/release/eww ~/.local/bin/
"

log "Instalación básica completada."
echo -e "\nReinicia el sistema para iniciar sesión."
echo -e "\n gabOS está listo. ¡Buen hacking, $USER_REAL!"
read -p "Presiona Enter para salir..."
